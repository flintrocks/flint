// RUN: %flintc %s --dump-ast | %FileCheck %s --prefix CHECK-AST

// CHECK-AST: ContractDeclaration
// CHECK-AST:  identifier "Foo"
contract Foo {}

Foo :: (any) {
// CHECK-AST: SpecialDeclaration
// CHECK-AST:   public
  public init() {}

  func foo() -> Int {

    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    var
    // CHECK-AST:    identifier "a"
    // CHECK-AST:    built-in type Int
    // CHECK-AST:  =
    // CHECK-AST:    literal 2
    var a: Int = 2
    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    var
    // CHECK-AST:    identifier "b"
    // CHECK-AST:    built-in type Int
    // CHECK-AST:  =
    // CHECK-AST:    literal 2000000000
    var b: Int = 2_000_000_000
    return a
  }

  func bar() -> String {
    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    let
    // CHECK-AST:    identifier "a"
    // CHECK-AST:    built-in type String
    // CHECK-AST:  =
    // CHECK-AST:    literal "hello"
    let a: String = "hello"
    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    let
    // CHECK-AST:    identifier "b"
    // CHECK-AST:    built-in type String
    // CHECK-AST:  =
    // CHECK-AST:    literal "hel_lo"
    let b: String = "hel_lo"
    return a
  }

  func zoo() -> Address {
    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    let
    // CHECK-AST:    identifier "a"
    // CHECK-AST:    built-in type Address
    // CHECK-AST:    =
    // CHECK-AST:    literal 0x0000000000000000000000000000000000000000
    let a: Address = 0x0000000000000000000000000000000000000000
    // CHECK-AST: BinaryExpression
    // CHECK-AST:  VariableDeclaration
    // CHECK-AST:    let
    // CHECK-AST:    identifier "b"
    // CHECK-AST:    built-in type Address
    // CHECK-AST:    =
    // CHECK-AST:    literal 0x0000000000000000000000000000000000000000
    let b: Address = 0x00000_00000_00000_00000_00000_00000_00000_00000
    return a
  }
}
