// RUN: %flintc %s --dump-ast | %FileCheck %s --prefix CHECK-AST

// CHECK-AST: TraitDeclaration (
// CHECK-AST:       token: external
// CHECK-AST:       Identifier (
// CHECK-AST:         token: identifier "Test"
// CHECK-AST:       )
external trait Test {

// CHECK-AST:      FunctionSignatureDeclaration (
// CHECK-AST:        token: func
// CHECK-AST:        Identifier (
// CHECK-AST:          token: identifier "f"
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "a"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            BasicType (
// CHECK-AST:              built-in type Address
// CHECK-AST:            )
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "b"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            BasicType (
// CHECK-AST:              built-in type String
// CHECK-AST:            )
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "c"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            ExternalType Int8
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "d"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            ExternalType UInt136
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "e"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            BasicType (
// CHECK-AST:              built-in type Bool
// CHECK-AST:            )
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        Parameter (
// CHECK-AST:          Identifier (
// CHECK-AST:            token: identifier "f"
// CHECK-AST:          )
// CHECK-AST:          Type (
// CHECK-AST:            ExternalType Int72
// CHECK-AST:            Generic Arguments (
// CHECK-AST:            )
// CHECK-AST:          )
// CHECK-AST:        )
// CHECK-AST:        token: )
// CHECK-AST:      )
  func f(a: Address, b: String, c: Int8, d: UInt136, e: Bool, f: Int72)

  @payable
  func g(b: Bool) -> Int
}

contract Contract {

}

Contract :: (any) {
  public init() {
    let addr: Address = 0x0000000000000000000000000000000000000000
    let contr: Test = Test(address: addr)

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call contr.f()

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     FunctionArgument (
    //   CHECK-AST:       Identifier (
    //   CHECK-AST:         token: identifier "wei"
    //   CHECK-AST:       )
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         token: literal 100
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call(wei: 100) contr.f()

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     FunctionArgument (
    //   CHECK-AST:      Identifier (
    //   CHECK-AST:        token: identifier "wei"
    //   CHECK-AST:       )
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         token: literal 100
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:     Forced execution (
    //   CHECK-AST:     )
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call(wei: 100)! contr.f()

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     Forced execution (
    //   CHECK-AST:     )
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call! contr.f()

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     Returns optional (
    //   CHECK-AST:     )
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call? contr.f()

    //   CHECK-AST: Statement (
    //   CHECK-AST:   ExternalCall (
    //   CHECK-AST:     Forced execution (
    //   CHECK-AST:     )
    //   CHECK-AST:     BinaryExpression (
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         Identifier (
    //   CHECK-AST:           token: identifier "contr"
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:       token: .
    //   CHECK-AST:       Expression (
    //   CHECK-AST:         FunctionCall (
    //   CHECK-AST:           Identifier (
    //   CHECK-AST:             token: identifier "f"
    //   CHECK-AST:           )
    //   CHECK-AST:           FunctionArgument (
    //   CHECK-AST:             Identifier (
    //   CHECK-AST:               token: identifier "test"
    //   CHECK-AST:             )
    //   CHECK-AST:             Expression (
    //   CHECK-AST:               ExternalCall (
    //   CHECK-AST:                 Forced execution (
    //   CHECK-AST:                 )
    //   CHECK-AST:                 BinaryExpression (
    //   CHECK-AST:                   Expression (
    //   CHECK-AST:                     Identifier (
    //   CHECK-AST:                       token: identifier "contr"
    //   CHECK-AST:                     )
    //   CHECK-AST:                   )
    //   CHECK-AST:                   token: .
    //   CHECK-AST:                   Expression (
    //   CHECK-AST:                     FunctionCall (
    //   CHECK-AST:                       Identifier (
    //   CHECK-AST:                         token: identifier "f"
    //   CHECK-AST:                       )
    //   CHECK-AST:                       token: )
    //   CHECK-AST:                     )
    //   CHECK-AST:                   )
    //   CHECK-AST:                 )
    //   CHECK-AST:               )
    //   CHECK-AST:             )
    //   CHECK-AST:           )
    //   CHECK-AST:           token: )
    //   CHECK-AST:         )
    //   CHECK-AST:       )
    //   CHECK-AST:     )
    //   CHECK-AST:   )
    //   CHECK-AST: )
    call! contr.f(test: call! contr.f())
  }
}

