contract Loop {
  var owner: Address
  var arr: Int[4] = []
  var arr2: Int[10] = []
  var arr3: [Int] = []
  var nested: [[Int]] = [[]]
  var dict: [Int: Int] = [:]
  var numWrites: Int = 0
}

Loop :: caller <- (any) {
  public init() {
    self.owner = caller
  }

  mutating func increaseNumWrites() {
    self.numWrites += 1
  }

  public mutating func write(index: Int, val: Int) {
    arr[index] = val
    increaseNumWrites()
  }

  public mutating func write2(index: Int, val: Int) {
    arr2[index] = val
    increaseNumWrites()
  }

  public mutating func write3(index: Int, val: Int) {
    arr3[index] = val
    increaseNumWrites()
  }

  public mutating func writeNested(i: Int, j: Int, val: Int) {
    nested[i][j] = val
  }

  public mutating func writeDict(key: Int, value: Int) {
    dict[key] = value
  }

  public func value(index: Int) -> Int {
    return arr[index]
  }

  public func value2(index: Int) -> Int {
    return arr2[index]
  }

  public func value3(index: Int) -> Int {
    return arr3[index]
  }

  public func valueNested(i: Int, j: Int) -> Int {
    return nested[i][j]
  }

  public func valueDict(key: Int) -> Int {
    return dict[key]
  }

  public func sum() -> Int {
    var sum: Int = 0
    for let num: Int in arr {
      sum += num
    }
    return sum
  }

  public func sum2() -> Int {
    var sum: Int = 0
    for let num: Int in arr2 {
      sum += num
    }
    return sum
  }

  public func sum3() -> Int {
    var sum: Int = 0
    for let num: Int in (1...10) {
      sum += num
    }
    return sum
  }

  public func sum4() -> Int {
    var sum: Int = 0
    for let num: Int in (10..<15) {
      sum += num
    }
    return sum
  }

  public func sum5() -> Int {
    var sum: Int = 0
    for let num: Int in (10...1) {
      sum += num
    }
    return sum
  }

  public func sum6() -> Int {
    var sum: Int = 0
    for let num: Int in (10...10) {
      sum += num
    }
    return sum
  }

  public func sum7() -> Int {
    var sum: Int = 0
    for let num: Int in arr3 {
      sum += num
    }
    return sum
  }

  public func sum8() -> Int {
    var sum: Int = 0
    for var num: Int in arr {
      num = 1
      sum += num
    }
    return sum
  }

  public func sum9() -> Int {
    var sum: Int = 0
    for let sub: [Int] in nested {
      for let num: Int in sub {
        sum += num
      }
    }
    return sum
  }

  public func sum10() -> Int {
    var sum: Int = 0
    for let num: Int in dict {
      sum += num
    }
    return sum
  }

  public func sum11() -> Int {
    var sum: Int = 0
    for let num: Int in dict {
      sum += 1
    }
    return sum
  }

  public func valueBoth(index: Int) -> Int {
    return arr[index] + arr2[index]
  }

  public func sumBoth() -> Int {
    return sum() + sum2()
  }

  public func numWrites() -> Int {
    return numWrites
  }
}
