// RUN: %flintc %s --verify

contract Contract {

}

Contract :: (any) {
  func someFunc() {

  }

  func someReturningFunc() -> Int {
    return 42
  }

  public init() {
    do { // expected-error {{No 'call' found in do-catch block}}
      do {
        call self.someFunc()
      } catch is Error {

      }
    } catch is Error {

    } 

    do { 
      call self.someFunc()
      do { // expected-error {{No 'call' found in do-catch block}}

      } catch is Error {

      } 
    } catch is Error {

    }

    do {
      call self.someFunc()
      do {
        call self.someFunc()
      } catch is Error {

      } 
    } catch is Error {

    }

    do { // expected-error {{No 'call' found in do-catch block}}
      call! self.someFunc() // expected-error {{Cannot use 'call!' inside do-catch block}}     
    } catch is Error {

    } 

    do { // expected-error {{No 'call' found in do-catch block}}

    } catch is Error {

    } 

    do {
      if let x: Int = call? self.someReturningFunc() { // expected-error {{Assignment to the optional result of 'call?' is not yet implemented}}

      } else {

      }
      call self.someFunc()
    } catch is Error {

    }

    call? self.someReturningFunc() // expected-error {{Only inside 'if let ... = call?' may 'call?' be used}}

    if let x: Int = call? self.someReturningFunc() { // expected-error {{Assignment to the optional result of 'call?' is not yet implemented}}

    } 
    
  }
}
