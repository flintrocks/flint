// RUN: %flintc %s --verify

contract Test {
  let a: Address
  var b: [Address] = []
  var c: [Address: Int] = [] // expected-error {{Incompatible assignment between values of type '[Address: Int]' and '[Any]'}}
  var d: [Int] = [:] // expected-error {{Incompatible assignment between values of type '[Int]' and '[Any: Any]'}}
  var e: Bool
  var f: Int
  let g: Bool
  let h: Int = completelyinvalid // expected-error {{Use of undeclared identifier 'completelyinvalid'}}
  var x: B
  var y: B = B(f, g) // expected-error {{Cannot use state property 'f' within the initialization of another property}}
                     // expected-error@-1 {{Cannot use state property 'g' within the initialization of another property}}
}

Test :: caller <- (any) {
  public init(a: Address, f: Int) { // expected-note {{A public initializer is already declared here}}
    self.a = a
    self.f = f
  } // expected-error {{Return from initializer without initializing all properties}}
    // expected-note@8 {{'e' is uninitialized}}
    // expected-note@12 {{'x' is uninitialized}}

  public init() { // expected-error {{A public initializer has already been defined}}
    self.a = caller
    e = false
    f = 0
    g = false
    x = B(0, false)
  }

  init() {
    self.a = caller
    e = false
    f = 0
    g = false
    x = B(0, false)
  }

  mutating func foo() {
    x = B(1, true)
    x = C(1) // expected-error {{Incompatible assignment between values of type 'B' and 'C'}}
    D() // expected-error {{Cannot call struct initializer 'D' without receiver assignment}}
  }
}

Test :: (a) {
  public init(a: Address) { // expected-error {{Public contract initializer should be callable using caller protection 'any'}}
    self.a = a
    e = false
    f = 0
    g = false
    x = B(0, false)
  }
}

struct A {
  var a: Int = 0
  var b: Bool // expected-error {{State property 'b' needs to be assigned a value}}
  var c: C = C(0)

  func initB() {
    var b: B = B() // expected-error {{Function 'B' is not in scope}}
    // expected-note@+9 {{Perhaps you meant the initializer for this struct}}
  }
}

struct B {
  var a: Int = 0
  var b: Bool
  var c: C = C(0)

  init(a: Int, b: Bool) {
    self.a = a
    self.b = b
  }
}

struct C {
  var a: Int // expected-note {{'a' is uninitialized}}
  let b: Bool = false

  init() {} // expected-error {{Return from initializer without initializing all properties}}

  init(a: Int) {
    self.a = a
  }
}

struct D {
  let a: Int = 0
  let b: Int = a // expected-error {{Cannot use state property 'a' within the initialization of another property}}
  let c: Int = a + 1 // expected-error {{Cannot use state property 'a' within the initialization of another property}}
  let d: B = B(a, false) // expected-error {{Cannot use state property 'a' within the initialization of another property}}
}
