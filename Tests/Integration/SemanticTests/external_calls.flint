// RUN: %flintc %s --verify

external trait Test {
  public func f()

  func g() -> Int

  public init(c: Bool)
}

Contract :: (any) {
  public init() {
    // PARAMETER TESTS
    call! self.someFunc()
    call(gas: 100)! self.someFunc()
    call(value: Wei(100))! self.someFunc()
    call(value: Wei(100), gas: 100)! self.someFunc()

    call(gas: 100, value: Wei(200), gas: 300)! self.someFunc() // expected-error {{'gas' hyper-parameter was already specified}}
    call(value: Wei(100), value: Wei(200), value: Wei(300))! self.someFunc() // expected-error {{'value' hyper-parameter was already specified}}
    // expected-error@-1 {{'value' hyper-parameter was already specified}}

    call(Wei(100))! self.someFunc() // expected-error {{External call hyper-parameter was not labeled}}

    call(money: Wei(100))! self.someFunc() // expected-error {{'money' is not a valid external call hyper-parameter}}

    // EXTERNAL TRAIT CALL TESTS
    let addr: Address = 0x0000000000000000000000000000000000000000
    let contr: Test = Test(address: addr)

    call contr.f() // expected-error {{Cannot use `call` outside do-catch blok}}

    call contr.g() // expected-error {{Cannot use `call` outside do-catch blok}}

    do {
        call contr.f()

        call contr.g()

        let x: Int = call contr.g()

        let y: Bool = call contr.g() // expected-error {{Incompatible assignment between values of type 'Bool' and 'Int'}}
    } catch is Error {

    }

    call! contr.f()

    call! contr.g()

    let x2: Int = call! contr.g()

    let y2: Bool = call contr.g() // expected-error {{Incompatible assignment between values of type 'Bool' and 'Int'}}

    call? contr.f() // expected-error {{Cannot use `call?` with external function that has no return type}}

    let x: Int = call? contr.g() 
  }
}

