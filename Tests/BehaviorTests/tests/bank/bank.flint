contract Bank {
  var manager: Address
  var balances: [Address: Wei] = [:]
  var accounts: [Address] = []
  var lastIndex: Int = 0

  var totalDonations: Wei = Wei(0)
}

Bank :: account <- (any) {
  public init(manager: Address) {
    self.manager = manager
  }

  public mutating func register() {
    accounts[lastIndex] = account
    lastIndex += 1
  }

  public func getManager() -> Address {
    return manager
  }

  @payable
  public mutating func donate(implicit value: Wei) {
    totalDonations.transfer(source: &value)
  }
}

Bank :: (manager) {
  public mutating func freeDeposit(account: Address, amount: Int) {
    var w: Wei = Wei(amount)
    balances[account].transfer(source: &w)
  }

  public mutating func clear(account: Address) {
    balances[account] = Wei(0)
  }

  public func getDonations() -> Int {
    return totalDonations.getRawValue()
  }
}

Bank :: account <- (accounts) {
  public func getBalance() -> Int {
    return balances[account].getRawValue()
  }

  @payable
  public mutating func deposit(implicit value: Wei) {
    balances[account].transfer(source: &value)
  }

  public mutating func transfer(amount: Int, destination: Address) {
    balances[destination].transfer(source: &balances[account], amount: amount)
  }

  public mutating func withdraw(amount: Int) {
    let w: Wei = Wei(&balances[account], amount)
    send(account, &w)
  }
}
