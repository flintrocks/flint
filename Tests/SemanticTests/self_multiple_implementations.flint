// RUN: %flintc %s --verify

struct trait TheAsset {
  // Moves `amount` from `source` into `this` asset.
  mutating func transfer(source: inout Self, amount: Int) {
    if source.getRawValue() < amount {
      fatalError()
    }

    source.setRawValue(source.getRawValue() - amount)
    setRawValue(getRawValue() + amount)
  }

  // Returns the funds contained in this asset, as an integer.
  mutating func setRawValue(value: Int) -> Int

  // Returns the funds contained in this asset, as an integer.
  func getRawValue() -> Int
}

struct TheAssetOne: TheAsset {
  var value: Int = 0

  mutating func setRawValue(value: Int) -> Int {
    self.value = value
    return value
  }

  func getRawValue() -> Int {
    return value
  }
}

struct TheAssetTwo: TheAsset {
  var value: Int = 0

  mutating func setRawValue(value: Int) -> Int {
    self.value = value
    return value
  }

  func getRawValue() -> Int {
    return value
  }
}

struct Bla {
  init() {}

  mutating func abc() {
    var assOne: TheAssetOne = TheAssetOne()
    var assOneOne: TheAssetOne = TheAssetOne()

    assOne.transfer(&assOneOne, 100)

    var assTwo: TheAssetTwo = TheAssetTwo()
    var assTwoTwo: TheAssetTwo = TheAssetTwo()

    assTwo.transfer(&assTwoTwo, 100)
  }
}

contract A {}

A :: (any) {
  public init() {}

  public mutating func transfer() -> Bool {
    var assOne: TheAssetOne = TheAssetOne()
    var assOneOne: TheAssetOne = TheAssetOne()

    assOne.transfer(&assOneOne, 100)

    var assTwo: TheAssetTwo = TheAssetTwo()
    var assTwoTwo: TheAssetTwo = TheAssetTwo()

    assTwo.transfer(&assTwoTwo, 100)
    return true
  }
}
