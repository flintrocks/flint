// RUN: %flintc %s --verify

contract Test {
  var a: Int = 0
  var b: Int = 1
}

Test :: (any) {
  public init() {}
}

Test :: caller <- (any) {
  mutating func test1(a: Int = 0, b: Int = 1) {
    self.a = a
    self.b = b
  }

  mutating func test2() {
    test1()
    test1(a:2)
    test1(b:5)
    test1(a:3, b:2)
    test1(2)
    test1(2, b: 5)
    test1(a: 3, 5)
    test1(1, 1)
  }

  func bad_declaration(a: Int = 0, b: Address) {} // expected-error {{Default parameters should be the last ones to be declared}}
  func good_declaration(b: Address, a: Int = 0) {}
  func duplicate_declaration(a: Int, a: Int) {} // expected-error {{Duplicate parameter declarations in function declaration}}

  mutating func test3(a: Int, b: Int = 1) {
    self.a = a
    self.b = b
  }

  mutating func test4() {
    test3() // expected-error {{Function 'test3' is not in scope}}
    test3(1)
    test3(b: 3) // expected-error {{Function 'test3' is not in scope}}
    test3(a: 5)
    test3(1, 2)
    test3(1, b: 5)
    test3(3, b: 0x0000000000000000000000000000000000000000) // expected-error {{Function 'test3' is not in scope}}
    test3(b: 2, a: 2) // expected-error {{Function 'test3' cannot be called using the protection 'any'}}
  }

  func f(unseen_before_label1: Int = 0, unseen_before_label2: Int = 0) {}

  func g() {
    f()
    f(unseen_before_label1: 1)
    f(unseen_before_label2: 2)
    f(unseen_before_label1: 1, unseen_before_label2: 2)
  }

  func nested(x: Int = 1) -> Int {
    return x
  }

  func nested2(y: Int = 1) -> Int {
    return y
  }

  func nested3(z: Int) -> Int {
    return z
  }

  func nestedTest() -> Int {
    return nested3(z: nested2(y: nested()))
  }
}
