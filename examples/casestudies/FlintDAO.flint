// A condensed smart contract for a Decentralized Autonomous Organization (DAO)
// to automate organizational governance and decision-making.

// Removed features:
// - Spliting DAO
// - Grace/Quorum Periods
// Moved consensus features to curator to keep short

struct Proposal {
  var proposer: Address
  var value: Int
  var recipient: Address
  var yea: Int = 0
  var nay: Int = 0
  var finished: Bool = false
  var success: Bool = false
  var voted: [Address: Bool] = [:]

  mutating init(proposer: Address, value: Int, recipient: Address) {
    self.proposer = proposer
    self.value = value
    self.recipient = recipient
  }
}

contract SimpleDAO (Join, Propose, Vote) {
  var curator: Address
  visible var proposal: Int = 0
  var proposals: [Proposal] = []
  var balances: [Address: Wei] = [:]
  var totalstake: Int = 0
}

SimpleDAO @(any) :: caller <- (any) {
  public init(curator: Address){
    self.curator = curator
    become Join
  }

  public mutating fallback() {
    fatalError()
  }

  public func tokenHolder(addr: Address) -> Bool {
    return balances[addr].getRawValue() != 0
  }
}

SimpleDAO @(Join) :: caller <- (any) {

  @payable
  public mutating func join(implicit value: inout Wei) {
    totalstake += value.getRawValue()
    balances[caller].transfer(&value)
  }
}

SimpleDAO @(Join) :: (curator) {
  public mutating func joinTimeElapsed() {
    become Propose
  }
}

SimpleDAO @(Propose) :: caller <- (tokenHolder) {
  public mutating func newProposal(value: Int, recipient: Address) -> Int {
    // Sanity checks omitted to be concise
    let pID: Int = proposals.size + 1;
    proposals[pID] = Proposal(caller, value, recipient)
    return pID
  }

  public mutating func leave() {
    totalstake -= balances[caller].getRawValue()
    send(caller, &balances[caller])
  }
}

SimpleDAO @(Propose) :: (curator) {
  public mutating func beginVote(proposal: Int) {
    self.proposal = proposal
    become Vote
  }
}

SimpleDAO @(Vote) :: caller <- (tokenHolder) {
  public mutating func vote(approve: Bool) {
    if proposals[proposal].voted[caller] {
      fatalError()
    }

    if approve {
      proposals[proposal].yea += balances[caller].getRawValue()
    } else {
      proposals[proposal].nay += balances[caller].getRawValue()
    }

    proposals[proposal].voted[caller] = true
  }

  public mutating func executeProposal() {
    if(caller != proposals[proposal].proposer || proposals[proposal].finished) {
      fatalError()
    }

    proposals[proposal].finished = true
    // Quorum check omitted for brevity.
    if proposals[proposal].yea > proposals[proposal].nay {
       proposals[proposal].success = true
       let transfervalue: Wei = Wei(0)
       for let value: Wei in balances {
         let rawvalue: Int = (proposals[proposal].value * value.getRawValue()) / totalstake
         transfervalue.transfer(&value, rawvalue)
       }
       send(proposals[proposal].recipient, &transfervalue)
       totalstake -= proposals[proposal].value
    }

    become Propose
  }
}
