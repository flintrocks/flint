// Any currency should implement this trait to be able to use it fully.
// TODO: semantic check preventing cross-asset transfers
struct trait Asset {
  // Initialises the asset "unsafely", i.e. from `amount` given as an integer.
  public init(unsafeRawValue: Int)
  
  // Initialises the asset by transferring `amount` from an existing asset.
  // Should check if `source` has sufficient funds, and cause a fatal error
  // if not.
  public init(source: inout Asset, amount: Int) {
    if source.getRawValue() < amount {
      fatalError()
    }
    
    source.setRawValue(source.getRawValue() - amount)
    setRawValue(getRawValue() + amount)
  }
  
  // Initialises the asset by transferring all funds from `source`.
  // `source` should be left empty.
  public init(source: inout Asset) {
    let value: Int = source.getRawValue()
    source.setRawValue(0)
    setRawValue(value)
  }
  
  // Moves `amount` from `source` into `this` asset.
  mutating public func transfer(source: inout Asset, amount: Int) {
    if source.getRawValue() < amount {
      fatalError()
    }
    
    source.setRawValue(source.getRawValue() - amount)
    setRawValue(getRawValue() + amount)
  }
  
  // Moves all funds from `source` into `this` asset.
  mutating public func transfer(source: inout Asset) {
    transfer(&source, source.getRawValue())
  }
  
  // Returns the funds contained in this asset, as an integer.
  mutating public func setRawValue(value: Int) -> Int
  
  // Returns the funds contained in this asset, as an integer.
  public func getRawValue() -> Int
}
